기초특강2 

세미나에선 나아갈 방향 키워드 찾기
애플에서 1년에한번하는 대회


전기 13~18% 는 가정용 나머지다 회사 공장


SI쪽에서 시작 풀스택개발자로 취업하면좋다
다해보고 자기 적성에 맞는곳으로 옮기자
어떻게 돌아가는지 파악먼저

수학도 시간날때마다 즐겨라


삼성sds나 네이버 sds

 
어셈블리어(기계어와 유사한 언어인거지 기계어는 아니다)

컴파일 과 인터프리트

왜 자바는 바이트코드(가상 기계어) 를 만들었는가?



***컴파일 방식 프로그래밍 ( 진짜 컴파일을 하면 기계어로 변환)

hello.c명령문을 만들고 -> 컴파일	->  hello.exe  -
소스(원천,근본) 	         gcc hello.c	     기계어     -
파일

gcc -hello.c 로 컴파일하면 a.exe로 디폴트로 만들어져서
gcc -o hello.exe hello.c (-o로 파일명을 지정해줘야한다.)

중요한거!

윈도우에서 만든 기계어로는
리눅스에선 실행이안된다.
운영체제마다 기계어를 나열한 형식이 달라서
리눅스용 c컴파일러로 컴파일해서 실행을해줘야한다

운영체재와 cpu가 맞아야 호환이된다.
cpu가 달라지면 또 기계어가 달라지기떄문에 
운영체제 cpu 둘다 중요


printf 같은함수들은 스탠드다드 API라서
-운영체제 상관없이
 명령문안에 특정명령문이 없으면
 모든 운영체제에서 컴파일 가능


-기계어 파일 실행
-실행속도 빠르다.
-컴파일 할때 명령문 검사를 하기때문에 실행전에 오류를 알수있다.
-안정성 있음.



***인터프리트 방식 프로그래밍

		load		(자바스크립트 Run time)			실행
hello.js         	->		자바스크립트 인터프리터(해석기)		->				windos11(intel)
소스(자바스크립트)								(매번 명령문을 검사->변화->실행)
				*자바스크립트 엔진*
				(인터프리터,런타임,플레이어 같은말)
				(자바스크립트 만든사람이 쎄미나에서 엔진으로 말해서 엔진이 공용화됨)

-소스파일을 읽어서 실행
-실행속도가 느리다 ( 컴파일이 없기때문에 매번 명령문을 검사->변화->실행 하기때문에 느림)
-명령어를 실행하기 전에는 명령문에 오류가 있는지 없는지 알수없다. (버그가 늦게 발견됨)
-안전성 낮음
**중요* 소스코드가 노출 -> 프로그램이 자산 보호 안됨 
		       -> 해커가 소스분석해서 해킹할수있다.
보안에 취약하다.

스탠드얼론 방식 시스템에 설치하는방식은 인터프리트 방식을 안쓴다.


*** Hybrid 프로그래밍

"Write One, Run anywhere!"			
								
<----컴파일 방식------>	<---------인터프리트 방식--------->						
	컴파일							
.Java	->	.class		JWM(java run time)				
소스파일	         바이트코드		바이트코드 플레이어							
								
-문법 오류 검사
-명령문 최적화 
		(실행 명령수 감소 실행속도 향상)
-가상기계어로 변환
		(소스코드 노출 막음, 프로그램 자산들을 보호할수있다)










******* bytecode 실행 한계 극복

원래는 바이코드 한줄만 로드해서 실행만 했었음. 

Just in time 방식 (JIT)컴파일

자기가 필요한 부분만 진짜기계어로 변환 실행.

앱이 실행되는 순간 자주 사용되는 바이트 코드를 컴파일해 변환후 사용한다.

설치할때는 빠르지만 실행속도가 느리다.



Ahead of time(AOT) 컴파일

다운로드후 설치 시점에 전체 bytecode를 기계어로 변환

앱 설치할때 모든 코드를 바이트 코드로 변환후 ROM에 저장.

설치는 느리지만 실행속도가 빠르다.
이미 설치할때 모든 코드가 기계어로변환되기 때문.(보통 JIT보다 1.5 ~2배 차이)


최신안드로이드는 JIT 타입 AOT 방식 다 합쳤다
하이드리드. 

* CPU - OS - JDK


 intel cpu 기계어	
		
 App			
		
 MAC OS		
	

문법 복잡함	문법이 간단명료	
 intel cpu		  m1/m2	
(CISC 계열)	(RISC ARM계열)
		        ARM 영국회사 cpu설계도 판매
		엑시노스-겔럭시
AMD도 CISC계열

로제타
Rosetta 에물레이터


* JDK 종류


오라클(썬인수)를 하면서  OpenJDK(오픈소스) 오픈해서
수정 보완해서 나오고 회사마다 다르지만 유지보수까지 해줌. 회사에선 돈주고 써야한다 jdk8은 기업도 무료라서 현재 시장중 30~40%는 8쓴다	

오라클 JDK	IBM JDK 		Amazon JDK 	Azul JDK
	

GraalVM	





